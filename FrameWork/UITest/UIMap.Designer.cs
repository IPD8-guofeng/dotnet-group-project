// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Trade sell function for no owned record
        /// </summary>
        public void RecordedTradeSellMethod()
        {
            #region Variable Declarations
            WpfMenuItem uITradeMenuItem = this.UIDayTradeWindow.UIItemMenu.UIToolMenuItem.UITradeMenuItem;
            WpfEdit uITbTickerEdit = this.UIStockTradeWindow.UITbTickerEdit;
            WpfList uILbSuggestionList = this.UIStockTradeWindow.UILbSuggestionList;
            WpfRadioButton uISellRadioButton = this.UIStockTradeWindow.UISellRadioButton;
            WpfRadioButton uIBuyRadioButton = this.UIStockTradeWindow.UIBuyRadioButton;
            WpfTabList uITabControlTabList = this.UIDayTradeWindow.UITabControlTabList;
            WpfEdit uITbQuantityEdit = this.UIStockTradeWindow.UITbQuantityEdit;
            WpfComboBox uICbLimitComboBox = this.UIStockTradeWindow.UICbLimitComboBox;
            WpfButton uITradeButton = this.UIStockTradeWindow.UITradeButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WpfMenuItem uIExitMenuItem = this.UIDayTradeWindow.UIItemMenu.UIFileMenuItem.UIExitMenuItem;
            #endregion

            // Click 'Tool' -> 'Trade' menu item
            Mouse.Click(uITradeMenuItem, new Point(32, 10));

            // Type 't' in 'tbTicker' text box
            uITbTickerEdit.Text = this.RecordedTradeSellMethodParams.UITbTickerEditText;

            // Select 'AMT' in 'lbSuggestion' list box
            uILbSuggestionList.SelectedItemsAsString = this.RecordedTradeSellMethodParams.UILbSuggestionListSelectedItemsAsString;

            // Select 'Sell' radio button
            uISellRadioButton.Selected = this.RecordedTradeSellMethodParams.UISellRadioButtonSelected;

            // Select 'Buy' radio button
            uIBuyRadioButton.Selected = this.RecordedTradeSellMethodParams.UIBuyRadioButtonSelected;

            // Move 'tbTicker' text box to 'tabControl' tab list
            uITabControlTabList.EnsureClickable(new Point(681, 826));
            Mouse.StartDragging(uITbTickerEdit, new Point(48, 14));
            Mouse.StopDragging(uITabControlTabList, new Point(681, 826));

            // Click 'tbQuantity' text box
            Mouse.Click(uITbQuantityEdit, new Point(37, 17));

            // Select 'Sell' radio button
            uISellRadioButton.Selected = this.RecordedTradeSellMethodParams.UISellRadioButtonSelected1;

            // Select 'Buy' radio button
            uIBuyRadioButton.Selected = this.RecordedTradeSellMethodParams.UIBuyRadioButtonSelected1;

            // Type '250' in 'tbQuantity' text box
            uITbQuantityEdit.Text = this.RecordedTradeSellMethodParams.UITbQuantityEditText;

            // Double-Click 'cbLimit' combo box
            Mouse.DoubleClick(uICbLimitComboBox, new Point(93, 15));

            // Click 'Trade' button
            Mouse.Click(uITradeButton, new Point(29, 15));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(28, 16));

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(64, 15));
        }
        
        /// <summary>
        /// RecordedTradeMethod - Use 'RecordedTradeMethodParams' to pass parameters into this method.
        /// </summary>
        public void RecordedTradeMethod()
        {
            #region Variable Declarations
            WpfMenuItem uIToolMenuItem = this.UIDayTradeWindow.UIItemMenu.UIToolMenuItem;
            WpfMenuItem uIOpenAllwindowsMenuItem = this.UIDayTradeWindow.UIItemMenu.UIWindowMenuItem.UIOpenAllwindowsMenuItem;
            WinButton uIOKButton = this.UIDatabaseErrorWindow.UIOKWindow.UIOKButton;
            WinTitleBar uIDayTradeTitleBar = this.UIDayTradeWindow1.UIDayTradeTitleBar;
            WpfMenuItem uIChartMenuItem = this.UIDayTradeWindow.UIItemMenu.UIToolMenuItem.UIChartMenuItem;
            WinButton uICloseButton = this.UIStockChartWindow.UICloseButton;
            WpfEdit uITbTickerEdit = this.UIStockChartWindow1.UITbTickerEdit;
            WpfListItem uIABBVListItem = this.UIStockChartWindow1.UILbSuggestionList.UIABBVListItem;
            WpfButton uIShowCalendarButton = this.UIStockChartWindow1.UIDpStartDateDatePicker.UIShowCalendarButton;
            WpfButton uIPreviousbuttonButton = this.UIStockChartWindow1.UIPreviousbuttonButton;
            WpfDatePicker uIDpStartDateDatePicker = this.UIStockChartWindow1.UIDpStartDateDatePicker;
            WpfWindow uIStockChartWindow1 = this.UIStockChartWindow1;
            WpfDatePicker uIDpEndDateDatePicker = this.UIStockChartWindow1.UIDpEndDateDatePicker;
            WpfMenuItem uIFileMenuItem = this.UIDayTradeWindow.UIItemMenu.UIFileMenuItem;
            WpfMenuItem uICloseallwindowsMenuItem = this.UIDayTradeWindow.UIItemMenu.UIWindowMenuItem.UICloseallwindowsMenuItem;
            WpfMenuItem uIExitMenuItem = this.UIDayTradeWindow.UIItemMenu.UIFileMenuItem.UIExitMenuItem;
            #endregion

            // Click 'Tool' menu item
            Mouse.Click(uIToolMenuItem, new Point(23, 20));

            // Click 'Window' -> 'Open All windows' menu item
            Mouse.Click(uIOpenAllwindowsMenuItem, new Point(22, 16));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(58, 17));

            // Click 'Day Trade' title bar
            Mouse.Click(uIDayTradeTitleBar, new Point(67, 21));

            // Click 'Tool' -> 'Chart' menu item
            Mouse.Click(uIChartMenuItem, new Point(43, 16));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(24, 11));

            // Click 'tbTicker' text box
            Mouse.Click(uITbTickerEdit, new Point(45, 4));

            // Click 'tbTicker' text box
            Mouse.Click(uITbTickerEdit, new Point(45, 14));

            // Double-Click 'ABBV' list item
            Mouse.DoubleClick(uIABBVListItem, new Point(31, 9));

            // Click 'Show Calendar' button
            Mouse.Click(uIShowCalendarButton, new Point(11, 4));

            // Double-Click 'Previous button' button
            Mouse.DoubleClick(uIPreviousbuttonButton, new Point(21, 5));

            // Double-Click 'Previous button' button
            Mouse.DoubleClick(uIPreviousbuttonButton, new Point(21, 5));

            // Select '24-Apr-2016' in 'dpStartDate' date picker
            uIDpStartDateDatePicker.DateAsString = this.RecordedTradeMethodParams.UIDpStartDateDatePickerDateAsString;

            // Click 'StockChart' window
            Mouse.Click(uIStockChartWindow1, new Point(943, 237));

            // Select '07-Sep-2016' in 'dpEndDate' date picker
            uIDpEndDateDatePicker.DateAsString = this.RecordedTradeMethodParams.UIDpEndDateDatePickerDateAsString;

            // Double-Click 'ABBV' list item
            Mouse.DoubleClick(uIABBVListItem, new Point(68, 10));

            // Type 'ABB' in 'tbTicker' text box
            uITbTickerEdit.Text = this.RecordedTradeMethodParams.UITbTickerEditText;

            // Double-Click 'ABBV' list item
            Mouse.DoubleClick(uIABBVListItem, new Point(50, 7));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(45, 21));

            // Click 'Window' -> 'Close all windows' menu item
            Mouse.Click(uICloseallwindowsMenuItem, new Point(33, 13));

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(54, 16));
        }
        
        #region Properties
        public virtual RecordedTradeSellMethodParams RecordedTradeSellMethodParams
        {
            get
            {
                if ((this.mRecordedTradeSellMethodParams == null))
                {
                    this.mRecordedTradeSellMethodParams = new RecordedTradeSellMethodParams();
                }
                return this.mRecordedTradeSellMethodParams;
            }
        }
        
        public virtual RecordedTradeMethodParams RecordedTradeMethodParams
        {
            get
            {
                if ((this.mRecordedTradeMethodParams == null))
                {
                    this.mRecordedTradeMethodParams = new RecordedTradeMethodParams();
                }
                return this.mRecordedTradeMethodParams;
            }
        }
        
        public UIDayTradeWindow UIDayTradeWindow
        {
            get
            {
                if ((this.mUIDayTradeWindow == null))
                {
                    this.mUIDayTradeWindow = new UIDayTradeWindow();
                }
                return this.mUIDayTradeWindow;
            }
        }
        
        public UIStockTradeWindow UIStockTradeWindow
        {
            get
            {
                if ((this.mUIStockTradeWindow == null))
                {
                    this.mUIStockTradeWindow = new UIStockTradeWindow();
                }
                return this.mUIStockTradeWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIDatabaseErrorWindow UIDatabaseErrorWindow
        {
            get
            {
                if ((this.mUIDatabaseErrorWindow == null))
                {
                    this.mUIDatabaseErrorWindow = new UIDatabaseErrorWindow();
                }
                return this.mUIDatabaseErrorWindow;
            }
        }
        
        public UIDayTradeWindow1 UIDayTradeWindow1
        {
            get
            {
                if ((this.mUIDayTradeWindow1 == null))
                {
                    this.mUIDayTradeWindow1 = new UIDayTradeWindow1();
                }
                return this.mUIDayTradeWindow1;
            }
        }
        
        public UIStockChartWindow UIStockChartWindow
        {
            get
            {
                if ((this.mUIStockChartWindow == null))
                {
                    this.mUIStockChartWindow = new UIStockChartWindow();
                }
                return this.mUIStockChartWindow;
            }
        }
        
        public UIStockChartWindow1 UIStockChartWindow1
        {
            get
            {
                if ((this.mUIStockChartWindow1 == null))
                {
                    this.mUIStockChartWindow1 = new UIStockChartWindow1();
                }
                return this.mUIStockChartWindow1;
            }
        }
        #endregion
        
        #region Fields
        private RecordedTradeSellMethodParams mRecordedTradeSellMethodParams;
        
        private RecordedTradeMethodParams mRecordedTradeMethodParams;
        
        private UIDayTradeWindow mUIDayTradeWindow;
        
        private UIStockTradeWindow mUIStockTradeWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UIDatabaseErrorWindow mUIDatabaseErrorWindow;
        
        private UIDayTradeWindow1 mUIDayTradeWindow1;
        
        private UIStockChartWindow mUIStockChartWindow;
        
        private UIStockChartWindow1 mUIStockChartWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedTradeSellMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class RecordedTradeSellMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Type 't' in 'tbTicker' text box
        /// </summary>
        public string UITbTickerEditText = "t";
        
        /// <summary>
        /// Select 'AMT' in 'lbSuggestion' list box
        /// </summary>
        public string UILbSuggestionListSelectedItemsAsString = "AMT";
        
        /// <summary>
        /// Select 'Sell' radio button
        /// </summary>
        public bool UISellRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Buy' radio button
        /// </summary>
        public bool UIBuyRadioButtonSelected = true;
        
        /// <summary>
        /// Select 'Sell' radio button
        /// </summary>
        public bool UISellRadioButtonSelected1 = true;
        
        /// <summary>
        /// Select 'Buy' radio button
        /// </summary>
        public bool UIBuyRadioButtonSelected1 = true;
        
        /// <summary>
        /// Type '250' in 'tbQuantity' text box
        /// </summary>
        public string UITbQuantityEditText = "250";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedTradeMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class RecordedTradeMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Select '24-Apr-2016' in 'dpStartDate' date picker
        /// </summary>
        public string UIDpStartDateDatePickerDateAsString = "24-Apr-2016";
        
        /// <summary>
        /// Select '07-Sep-2016' in 'dpEndDate' date picker
        /// </summary>
        public string UIDpEndDateDatePickerDateAsString = "07-Sep-2016";
        
        /// <summary>
        /// Type 'ABB' in 'tbTicker' text box
        /// </summary>
        public string UITbTickerEditText = "ABB";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIDayTradeWindow : WpfWindow
    {
        
        public UIDayTradeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Day Trade";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Day Trade");
            #endregion
        }
        
        #region Properties
        public UIItemMenu UIItemMenu
        {
            get
            {
                if ((this.mUIItemMenu == null))
                {
                    this.mUIItemMenu = new UIItemMenu(this);
                }
                return this.mUIItemMenu;
            }
        }
        
        public WpfTabList UITabControlTabList
        {
            get
            {
                if ((this.mUITabControlTabList == null))
                {
                    this.mUITabControlTabList = new WpfTabList(this);
                    #region Search Criteria
                    this.mUITabControlTabList.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "tabControl";
                    this.mUITabControlTabList.WindowTitles.Add("Day Trade");
                    #endregion
                }
                return this.mUITabControlTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIItemMenu mUIItemMenu;
        
        private WpfTabList mUITabControlTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemMenu : WpfMenu
    {
        
        public UIItemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Day Trade");
            #endregion
        }
        
        #region Properties
        public UIToolMenuItem UIToolMenuItem
        {
            get
            {
                if ((this.mUIToolMenuItem == null))
                {
                    this.mUIToolMenuItem = new UIToolMenuItem(this);
                }
                return this.mUIToolMenuItem;
            }
        }
        
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIWindowMenuItem UIWindowMenuItem
        {
            get
            {
                if ((this.mUIWindowMenuItem == null))
                {
                    this.mUIWindowMenuItem = new UIWindowMenuItem(this);
                }
                return this.mUIWindowMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIToolMenuItem mUIToolMenuItem;
        
        private UIFileMenuItem mUIFileMenuItem;
        
        private UIWindowMenuItem mUIWindowMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIToolMenuItem : WpfMenuItem
    {
        
        public UIToolMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Tool";
            this.WindowTitles.Add("Day Trade");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UITradeMenuItem
        {
            get
            {
                if ((this.mUITradeMenuItem == null))
                {
                    this.mUITradeMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUITradeMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "menuTrade";
                    this.mUITradeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUITradeMenuItem.WindowTitles.Add("Day Trade");
                    #endregion
                }
                return this.mUITradeMenuItem;
            }
        }
        
        public WpfMenuItem UIChartMenuItem
        {
            get
            {
                if ((this.mUIChartMenuItem == null))
                {
                    this.mUIChartMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIChartMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "menuChart";
                    this.mUIChartMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIChartMenuItem.WindowTitles.Add("Day Trade");
                    #endregion
                }
                return this.mUIChartMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUITradeMenuItem;
        
        private WpfMenuItem mUIChartMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIFileMenuItem : WpfMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Day Trade");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "menuExit";
                    this.mUIExitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExitMenuItem.WindowTitles.Add("Day Trade");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIExitMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIWindowMenuItem : WpfMenuItem
    {
        
        public UIWindowMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Window";
            this.WindowTitles.Add("Day Trade");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIOpenAllwindowsMenuItem
        {
            get
            {
                if ((this.mUIOpenAllwindowsMenuItem == null))
                {
                    this.mUIOpenAllwindowsMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenAllwindowsMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "menuOpenAllWindows";
                    this.mUIOpenAllwindowsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenAllwindowsMenuItem.WindowTitles.Add("Day Trade");
                    #endregion
                }
                return this.mUIOpenAllwindowsMenuItem;
            }
        }
        
        public WpfMenuItem UICloseallwindowsMenuItem
        {
            get
            {
                if ((this.mUICloseallwindowsMenuItem == null))
                {
                    this.mUICloseallwindowsMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUICloseallwindowsMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "menuCloseAllWindows";
                    this.mUICloseallwindowsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseallwindowsMenuItem.WindowTitles.Add("Day Trade");
                    #endregion
                }
                return this.mUICloseallwindowsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIOpenAllwindowsMenuItem;
        
        private WpfMenuItem mUICloseallwindowsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIStockTradeWindow : WpfWindow
    {
        
        public UIStockTradeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "StockTrade";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("StockTrade");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITbTickerEdit
        {
            get
            {
                if ((this.mUITbTickerEdit == null))
                {
                    this.mUITbTickerEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITbTickerEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "tbTicker";
                    this.mUITbTickerEdit.WindowTitles.Add("StockTrade");
                    #endregion
                }
                return this.mUITbTickerEdit;
            }
        }
        
        public WpfList UILbSuggestionList
        {
            get
            {
                if ((this.mUILbSuggestionList == null))
                {
                    this.mUILbSuggestionList = new WpfList(this);
                    #region Search Criteria
                    this.mUILbSuggestionList.SearchProperties[WpfList.PropertyNames.AutomationId] = "lbSuggestion";
                    this.mUILbSuggestionList.WindowTitles.Add("StockTrade");
                    #endregion
                }
                return this.mUILbSuggestionList;
            }
        }
        
        public WpfRadioButton UISellRadioButton
        {
            get
            {
                if ((this.mUISellRadioButton == null))
                {
                    this.mUISellRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUISellRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "rbSell";
                    this.mUISellRadioButton.WindowTitles.Add("StockTrade");
                    #endregion
                }
                return this.mUISellRadioButton;
            }
        }
        
        public WpfRadioButton UIBuyRadioButton
        {
            get
            {
                if ((this.mUIBuyRadioButton == null))
                {
                    this.mUIBuyRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUIBuyRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "rbBuy";
                    this.mUIBuyRadioButton.WindowTitles.Add("StockTrade");
                    #endregion
                }
                return this.mUIBuyRadioButton;
            }
        }
        
        public WpfEdit UITbQuantityEdit
        {
            get
            {
                if ((this.mUITbQuantityEdit == null))
                {
                    this.mUITbQuantityEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITbQuantityEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "tbQuantity";
                    this.mUITbQuantityEdit.WindowTitles.Add("StockTrade");
                    #endregion
                }
                return this.mUITbQuantityEdit;
            }
        }
        
        public WpfComboBox UICbLimitComboBox
        {
            get
            {
                if ((this.mUICbLimitComboBox == null))
                {
                    this.mUICbLimitComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUICbLimitComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "cbLimit";
                    this.mUICbLimitComboBox.WindowTitles.Add("StockTrade");
                    #endregion
                }
                return this.mUICbLimitComboBox;
            }
        }
        
        public WpfButton UITradeButton
        {
            get
            {
                if ((this.mUITradeButton == null))
                {
                    this.mUITradeButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUITradeButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnTrade";
                    this.mUITradeButton.WindowTitles.Add("StockTrade");
                    #endregion
                }
                return this.mUITradeButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITbTickerEdit;
        
        private WpfList mUILbSuggestionList;
        
        private WpfRadioButton mUISellRadioButton;
        
        private WpfRadioButton mUIBuyRadioButton;
        
        private WpfEdit mUITbQuantityEdit;
        
        private WpfComboBox mUICbLimitComboBox;
        
        private WpfButton mUITradeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIDatabaseErrorWindow : WinWindow
    {
        
        public UIDatabaseErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Database Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Database Error");
            #endregion
        }
        
        #region Properties
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Database Error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Database Error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIDayTradeWindow1 : WinWindow
    {
        
        public UIDayTradeWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Day Trade";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Day Trade");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIDayTradeTitleBar
        {
            get
            {
                if ((this.mUIDayTradeTitleBar == null))
                {
                    this.mUIDayTradeTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIDayTradeTitleBar.WindowTitles.Add("Day Trade");
                    #endregion
                }
                return this.mUIDayTradeTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIDayTradeTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIStockChartWindow : WinWindow
    {
        
        public UIStockChartWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "StockChart";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("StockChart");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("StockChart");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIStockChartWindow1 : WpfWindow
    {
        
        public UIStockChartWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "StockChart";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("StockChart");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITbTickerEdit
        {
            get
            {
                if ((this.mUITbTickerEdit == null))
                {
                    this.mUITbTickerEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITbTickerEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "tbTicker";
                    this.mUITbTickerEdit.WindowTitles.Add("StockChart");
                    #endregion
                }
                return this.mUITbTickerEdit;
            }
        }
        
        public UILbSuggestionList UILbSuggestionList
        {
            get
            {
                if ((this.mUILbSuggestionList == null))
                {
                    this.mUILbSuggestionList = new UILbSuggestionList(this);
                }
                return this.mUILbSuggestionList;
            }
        }
        
        public UIDpStartDateDatePicker UIDpStartDateDatePicker
        {
            get
            {
                if ((this.mUIDpStartDateDatePicker == null))
                {
                    this.mUIDpStartDateDatePicker = new UIDpStartDateDatePicker(this);
                }
                return this.mUIDpStartDateDatePicker;
            }
        }
        
        public WpfButton UIPreviousbuttonButton
        {
            get
            {
                if ((this.mUIPreviousbuttonButton == null))
                {
                    this.mUIPreviousbuttonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPreviousbuttonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_PreviousButton";
                    this.mUIPreviousbuttonButton.WindowTitles.Add("StockChart");
                    #endregion
                }
                return this.mUIPreviousbuttonButton;
            }
        }
        
        public WpfDatePicker UIDpEndDateDatePicker
        {
            get
            {
                if ((this.mUIDpEndDateDatePicker == null))
                {
                    this.mUIDpEndDateDatePicker = new WpfDatePicker(this);
                    #region Search Criteria
                    this.mUIDpEndDateDatePicker.SearchProperties[WpfDatePicker.PropertyNames.AutomationId] = "dpEndDate";
                    this.mUIDpEndDateDatePicker.WindowTitles.Add("StockChart");
                    #endregion
                }
                return this.mUIDpEndDateDatePicker;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITbTickerEdit;
        
        private UILbSuggestionList mUILbSuggestionList;
        
        private UIDpStartDateDatePicker mUIDpStartDateDatePicker;
        
        private WpfButton mUIPreviousbuttonButton;
        
        private WpfDatePicker mUIDpEndDateDatePicker;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UILbSuggestionList : WpfList
    {
        
        public UILbSuggestionList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "lbSuggestion";
            this.WindowTitles.Add("StockChart");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIABBVListItem
        {
            get
            {
                if ((this.mUIABBVListItem == null))
                {
                    this.mUIABBVListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIABBVListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "ABBV";
                    this.mUIABBVListItem.WindowTitles.Add("StockChart");
                    #endregion
                }
                return this.mUIABBVListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIABBVListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIDpStartDateDatePicker : WpfDatePicker
    {
        
        public UIDpStartDateDatePicker(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfDatePicker.PropertyNames.AutomationId] = "dpStartDate";
            this.WindowTitles.Add("StockChart");
            #endregion
        }
        
        #region Properties
        public WpfButton UIShowCalendarButton
        {
            get
            {
                if ((this.mUIShowCalendarButton == null))
                {
                    this.mUIShowCalendarButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIShowCalendarButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Button";
                    this.mUIShowCalendarButton.WindowTitles.Add("StockChart");
                    #endregion
                }
                return this.mUIShowCalendarButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIShowCalendarButton;
        #endregion
    }
}
